services:
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    restart: always
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 10
  postgres:
    image: postgres:15
    container_name: netbox_db
    restart: always
    environment:
      POSTGRES_DB: netbox
      POSTGRES_USER: netbox
      POSTGRES_PASSWORD: netbox
    volumes:
      - netbox-db:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    container_name: netbox_redis
    restart: always
    command: [ "redis-server", "--appendonly", "yes" ]
    ports:
      - "6379:6379"

  netbox_external:
    image: netboxcommunity/netbox:latest
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    environment:
      # Postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: netbox
      DB_USER: netbox
      DB_PASSWORD: netbox

      # Redis (RQ - фоновые задачи)
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD:
      REDIS_SSL: "false"

      # Redis Cache (Django cache) — ЭТОГО НЕ ХВАТАЛО
      REDIS_CACHE_HOST: redis
      REDIS_CACHE_PORT: 6379
      REDIS_CACHE_PASSWORD:
      REDIS_CACHE_SSL: "false"

      # Прочее
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: "*"
      SUPERUSER_NAME: admin
      SUPERUSER_EMAIL: admin@example.com
      SUPERUSER_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - netbox-static:/opt/netbox/netbox/static
      - netbox-media:/opt/netbox/netbox/media
    restart: always

  netbox_grpc:
    build:
      context: ../NetBox
      dockerfile: Dockerfile
      args:
        CLOUDSMITH_USER: "${CLOUDSMITH_USER}"
        CLOUDSMITH_TOKEN: "${CLOUDSMITH_TOKEN}"
    container_name: netbox_grpc
    env_file:
      - .env
      - ../NetBox/.env
    environment:
      # чтобы твой NetBox-сервис ходил в внешний NetBox API
      NETBOX_API_URL: "http://netbox_external:8080"
    volumes:
      - ../NetBox:/app
    command: python manage.py workers netbox
    ports:
      - "50051:50051"
    restart: always
    mem_limit: 512m
    mem_reservation: 256m
    depends_on:
      - netbox_external
  audit_discovery:
    build:
      context: ../Audit
      dockerfile: Dockerfile
      args:
        CLOUDSMITH_USER: "${CLOUDSMITH_USER}"
        CLOUDSMITH_TOKEN: "${CLOUDSMITH_TOKEN}"
    container_name: audit_discovery
    env_file:
      - .env
      - ../Audit/.env
    volumes:
      - ../Audit:/app
    command: python manage.py workers audit
    depends_on:
      - kafka
      - netbox_grpc
    restart: always
    mem_limit: 512m
    mem_reservation: 256m

  api_gateway:
    build:
      context: ../ApiGateway
      dockerfile: Dockerfile
      args:
        CLOUDSMITH_USER: "${CLOUDSMITH_USER}"
        CLOUDSMITH_TOKEN: "${CLOUDSMITH_TOKEN}"
    container_name: api_gateway
    env_file:
      - .env
      - ../ApiGateway/.env
    environment:
      # чтобы гейт разговаривал с gRPC
      NETBOX_GRPC_ADDR: "netbox_grpc:50051"
      # (если вдруг гейт ещё напрямую дёргает NetBox HTTP)
      NETBOX_API_URL: "http://netbox_external:8080"
    volumes:
      - ../ApiGateway:/app
    command: python manage.py server
    ports:
      - "8088:8000"
    depends_on:
      kafka:
        condition: service_healthy
      netbox_grpc:
        condition: service_started
      netbox_external:
        condition: service_started
    restart: always
    mem_limit: 768m
    mem_reservation: 512m

  api_gateway_worker:
    build:
      context: ../ApiGateway
      dockerfile: Dockerfile
      args:
        CLOUDSMITH_USER: "${CLOUDSMITH_USER}"
        CLOUDSMITH_TOKEN: "${CLOUDSMITH_TOKEN}"
    container_name: api_gateway_worker
    env_file:
      - .env
      - ../ApiGateway/.env
    environment:
      NETBOX_GRPC_ADDR: "netbox_grpc:50051"
      NETBOX_API_URL: "http://netbox_external:8080"
    volumes:
      - ../ApiGateway:/app
    command: python manage.py workers kafka
    depends_on:
      kafka:
        condition: service_healthy
      netbox_grpc:
        condition: service_started
      netbox_external:
        condition: service_started
    restart: always
    mem_limit: 768m
    mem_reservation: 512m

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
volumes:
  netbox-db:
  netbox-static:
  netbox-media:
  prometheus-data:
